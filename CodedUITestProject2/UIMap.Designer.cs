// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// GeneralTest - Use 'GeneralTestParams' to pass parameters into this method.
        /// </summary>
        public void GeneralTest()
        {
            #region Variable Declarations
            WinComboBox uINmCombinationItemsComboBox = this.UIAUTmainformWindow.UINmCombinationItemsWindow.UINmCombinationItemsComboBox;
            WinComboBox uINmSubsetComboBox = this.UIAUTmainformWindow.UINmSubsetWindow.UINmSubsetComboBox;
            WinButton uIGenerateallButton = this.UIAUTmainformWindow.UIGenerateallWindow.UIGenerateallButton;
            WinComboBox uITotalcombinationsComboBox = this.UIAUTmainformWindow.UINmMthCombinationWindow.UITotalcombinationsComboBox;
            WinComboBox uINmPermutationItemsComboBox = this.UIAUTmainformWindow.UINmPermutationItemsWindow.UINmPermutationItemsComboBox;
            WinButton uIGenerateallButton1 = this.UIAUTmainformWindow.UIGenerateallWindow1.UIGenerateallButton;
            WinComboBox uITotalpermutationsComboBox = this.UIAUTmainformWindow.UINmMthPermutationWindow.UITotalpermutationsComboBox;
            WinEdit uITotalpermutationsEdit = this.UIAUTmainformWindow.UITotalpermutationsComboBox.UITotalpermutationsEdit;
            #endregion

            // Select '8' in 'nmCombinationItems' combo box
            uINmCombinationItemsComboBox.SelectedItem = this.GeneralTestParams.UINmCombinationItemsComboBoxSelectedItem;

            // Select '4' in 'nmSubset' combo box
            uINmSubsetComboBox.SelectedItem = this.GeneralTestParams.UINmSubsetComboBoxSelectedItem;

            // Click 'Generate all' button
            Mouse.Click(uIGenerateallButton, new Point(56, 14));

            // Select '15' in 'Total combinations:' combo box
            uITotalcombinationsComboBox.SelectedItem = this.GeneralTestParams.UITotalcombinationsComboBoxSelectedItem;

            // Select '7' in 'nmPermutationItems' combo box
            uINmPermutationItemsComboBox.SelectedItem = this.GeneralTestParams.UINmPermutationItemsComboBoxSelectedItem;

            // Click 'Generate all' button
            Mouse.Click(uIGenerateallButton1, new Point(77, 14));

            // Select '4999' in 'Total permutations:' combo box
            uITotalpermutationsComboBox.SelectedItem = this.GeneralTestParams.UITotalpermutationsComboBoxSelectedItem;

            // Type '{Enter}' in 'Total permutations:' text box
            Keyboard.SendKeys(uITotalpermutationsEdit, this.GeneralTestParams.UITotalpermutationsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMthPermutation - Use 'AssertMthPermutationExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMthPermutation()
        {
            #region Variable Declarations
            WinEdit uITextMthPermutationEdit = this.UIAUTmainformWindow.UIItem0123456789Window.UITextMthPermutationEdit;
            #endregion

            // Verify that the 'Text' property of 'textMthPermutation' text box equals '0 1 6 2 5 3 4 '
            Assert.AreEqual(this.AssertMthPermutationExpectedValues.UITextMthPermutationEditText, uITextMthPermutationEdit.Text, "Expected Mth item differs from actual");
        }
        
        /// <summary>
        /// Steps2 - Use 'Steps2Params' to pass parameters into this method.
        /// </summary>
        public void Steps2()
        {
            #region Variable Declarations
            WinComboBox uITotalpermutationsComboBox = this.UIAUTmainformWindow.UINmMthPermutationWindow.UITotalpermutationsComboBox;
            WinEdit uITotalpermutationsEdit = this.UIAUTmainformWindow.UITotalpermutationsComboBox.UITotalpermutationsEdit;
            #endregion

            // Select '80' in 'Total permutations:' combo box
            uITotalpermutationsComboBox.SelectedItem = this.Steps2Params.UITotalpermutationsComboBoxSelectedItem;

            // Type '{Enter}' in 'Total permutations:' text box
            Keyboard.SendKeys(uITotalpermutationsEdit, this.Steps2Params.UITotalpermutationsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Assert80thPermutation - Use 'Assert80thPermutationExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert80thPermutation()
        {
            #region Variable Declarations
            WinEdit uITextMthPermutationEdit = this.UIAUTmainformWindow.UIItem0123456789Window.UITextMthPermutationEdit;
            #endregion

            // Verify that the 'Text' property of 'textMthPermutation' text box equals '0 1 5 3 4 2 6 '
            Assert.AreEqual(this.Assert80thPermutationExpectedValues.UITextMthPermutationEditText, uITextMthPermutationEdit.Text, "Assert80thPermutation");
        }
        
        #region Properties
        public virtual GeneralTestParams GeneralTestParams
        {
            get
            {
                if ((this.mGeneralTestParams == null))
                {
                    this.mGeneralTestParams = new GeneralTestParams();
                }
                return this.mGeneralTestParams;
            }
        }
        
        public virtual AssertMthPermutationExpectedValues AssertMthPermutationExpectedValues
        {
            get
            {
                if ((this.mAssertMthPermutationExpectedValues == null))
                {
                    this.mAssertMthPermutationExpectedValues = new AssertMthPermutationExpectedValues();
                }
                return this.mAssertMthPermutationExpectedValues;
            }
        }
        
        public virtual Steps2Params Steps2Params
        {
            get
            {
                if ((this.mSteps2Params == null))
                {
                    this.mSteps2Params = new Steps2Params();
                }
                return this.mSteps2Params;
            }
        }
        
        public virtual Assert80thPermutationExpectedValues Assert80thPermutationExpectedValues
        {
            get
            {
                if ((this.mAssert80thPermutationExpectedValues == null))
                {
                    this.mAssert80thPermutationExpectedValues = new Assert80thPermutationExpectedValues();
                }
                return this.mAssert80thPermutationExpectedValues;
            }
        }
        
        public UIAUTmainformWindow UIAUTmainformWindow
        {
            get
            {
                if ((this.mUIAUTmainformWindow == null))
                {
                    this.mUIAUTmainformWindow = new UIAUTmainformWindow();
                }
                return this.mUIAUTmainformWindow;
            }
        }
        #endregion
        
        #region Fields
        private GeneralTestParams mGeneralTestParams;
        
        private AssertMthPermutationExpectedValues mAssertMthPermutationExpectedValues;
        
        private Steps2Params mSteps2Params;
        
        private Assert80thPermutationExpectedValues mAssert80thPermutationExpectedValues;
        
        private UIAUTmainformWindow mUIAUTmainformWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GeneralTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GeneralTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select '8' in 'nmCombinationItems' combo box
        /// </summary>
        public string UINmCombinationItemsComboBoxSelectedItem = "8";
        
        /// <summary>
        /// Select '4' in 'nmSubset' combo box
        /// </summary>
        public string UINmSubsetComboBoxSelectedItem = "4";
        
        /// <summary>
        /// Select '15' in 'Total combinations:' combo box
        /// </summary>
        public string UITotalcombinationsComboBoxSelectedItem = "15";
        
        /// <summary>
        /// Select '7' in 'nmPermutationItems' combo box
        /// </summary>
        public string UINmPermutationItemsComboBoxSelectedItem = "7";
        
        /// <summary>
        /// Select '4999' in 'Total permutations:' combo box
        /// </summary>
        public string UITotalpermutationsComboBoxSelectedItem = "4999";
        
        /// <summary>
        /// Type '{Enter}' in 'Total permutations:' text box
        /// </summary>
        public string UITotalpermutationsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMthPermutation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMthPermutationExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textMthPermutation' text box equals '0 1 6 2 5 3 4 '
        /// </summary>
        public string UITextMthPermutationEditText = "0 1 6 2 5 3 4 ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Steps2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Steps2Params
    {
        
        #region Fields
        /// <summary>
        /// Select '80' in 'Total permutations:' combo box
        /// </summary>
        public string UITotalpermutationsComboBoxSelectedItem = "80";
        
        /// <summary>
        /// Type '{Enter}' in 'Total permutations:' text box
        /// </summary>
        public string UITotalpermutationsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert80thPermutation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert80thPermutationExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textMthPermutation' text box equals '0 1 5 3 4 2 6 '
        /// </summary>
        public string UITextMthPermutationEditText = "0 1 5 3 4 2 6 ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAUTmainformWindow : WinWindow
    {
        
        public UIAUTmainformWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AUT main form";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public UINmCombinationItemsWindow UINmCombinationItemsWindow
        {
            get
            {
                if ((this.mUINmCombinationItemsWindow == null))
                {
                    this.mUINmCombinationItemsWindow = new UINmCombinationItemsWindow(this);
                }
                return this.mUINmCombinationItemsWindow;
            }
        }
        
        public UINmSubsetWindow UINmSubsetWindow
        {
            get
            {
                if ((this.mUINmSubsetWindow == null))
                {
                    this.mUINmSubsetWindow = new UINmSubsetWindow(this);
                }
                return this.mUINmSubsetWindow;
            }
        }
        
        public UIGenerateallWindow UIGenerateallWindow
        {
            get
            {
                if ((this.mUIGenerateallWindow == null))
                {
                    this.mUIGenerateallWindow = new UIGenerateallWindow(this);
                }
                return this.mUIGenerateallWindow;
            }
        }
        
        public UINmMthCombinationWindow UINmMthCombinationWindow
        {
            get
            {
                if ((this.mUINmMthCombinationWindow == null))
                {
                    this.mUINmMthCombinationWindow = new UINmMthCombinationWindow(this);
                }
                return this.mUINmMthCombinationWindow;
            }
        }
        
        public UINmPermutationItemsWindow UINmPermutationItemsWindow
        {
            get
            {
                if ((this.mUINmPermutationItemsWindow == null))
                {
                    this.mUINmPermutationItemsWindow = new UINmPermutationItemsWindow(this);
                }
                return this.mUINmPermutationItemsWindow;
            }
        }
        
        public UIGenerateallWindow1 UIGenerateallWindow1
        {
            get
            {
                if ((this.mUIGenerateallWindow1 == null))
                {
                    this.mUIGenerateallWindow1 = new UIGenerateallWindow1(this);
                }
                return this.mUIGenerateallWindow1;
            }
        }
        
        public UINmMthPermutationWindow UINmMthPermutationWindow
        {
            get
            {
                if ((this.mUINmMthPermutationWindow == null))
                {
                    this.mUINmMthPermutationWindow = new UINmMthPermutationWindow(this);
                }
                return this.mUINmMthPermutationWindow;
            }
        }
        
        public UITotalpermutationsComboBox UITotalpermutationsComboBox
        {
            get
            {
                if ((this.mUITotalpermutationsComboBox == null))
                {
                    this.mUITotalpermutationsComboBox = new UITotalpermutationsComboBox(this);
                }
                return this.mUITotalpermutationsComboBox;
            }
        }
        
        public UIItem0123456789Window UIItem0123456789Window
        {
            get
            {
                if ((this.mUIItem0123456789Window == null))
                {
                    this.mUIItem0123456789Window = new UIItem0123456789Window(this);
                }
                return this.mUIItem0123456789Window;
            }
        }
        #endregion
        
        #region Fields
        private UINmCombinationItemsWindow mUINmCombinationItemsWindow;
        
        private UINmSubsetWindow mUINmSubsetWindow;
        
        private UIGenerateallWindow mUIGenerateallWindow;
        
        private UINmMthCombinationWindow mUINmMthCombinationWindow;
        
        private UINmPermutationItemsWindow mUINmPermutationItemsWindow;
        
        private UIGenerateallWindow1 mUIGenerateallWindow1;
        
        private UINmMthPermutationWindow mUINmMthPermutationWindow;
        
        private UITotalpermutationsComboBox mUITotalpermutationsComboBox;
        
        private UIItem0123456789Window mUIItem0123456789Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINmCombinationItemsWindow : WinWindow
    {
        
        public UINmCombinationItemsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nmCombinationItems";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinComboBox UINmCombinationItemsComboBox
        {
            get
            {
                if ((this.mUINmCombinationItemsComboBox == null))
                {
                    this.mUINmCombinationItemsComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUINmCombinationItemsComboBox.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUINmCombinationItemsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUINmCombinationItemsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINmSubsetWindow : WinWindow
    {
        
        public UINmSubsetWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nmSubset";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinComboBox UINmSubsetComboBox
        {
            get
            {
                if ((this.mUINmSubsetComboBox == null))
                {
                    this.mUINmSubsetComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUINmSubsetComboBox.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUINmSubsetComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUINmSubsetComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGenerateallWindow : WinWindow
    {
        
        public UIGenerateallWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonGenerateAllCombinations";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinButton UIGenerateallButton
        {
            get
            {
                if ((this.mUIGenerateallButton == null))
                {
                    this.mUIGenerateallButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGenerateallButton.SearchProperties[WinButton.PropertyNames.Name] = "Generate all";
                    this.mUIGenerateallButton.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUIGenerateallButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGenerateallButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINmMthCombinationWindow : WinWindow
    {
        
        public UINmMthCombinationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nmMthCombination";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinComboBox UITotalcombinationsComboBox
        {
            get
            {
                if ((this.mUITotalcombinationsComboBox == null))
                {
                    this.mUITotalcombinationsComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUITotalcombinationsComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Total combinations:";
                    this.mUITotalcombinationsComboBox.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUITotalcombinationsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUITotalcombinationsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINmPermutationItemsWindow : WinWindow
    {
        
        public UINmPermutationItemsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nmPermutationItems";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinComboBox UINmPermutationItemsComboBox
        {
            get
            {
                if ((this.mUINmPermutationItemsComboBox == null))
                {
                    this.mUINmPermutationItemsComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUINmPermutationItemsComboBox.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUINmPermutationItemsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUINmPermutationItemsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIGenerateallWindow1 : WinWindow
    {
        
        public UIGenerateallWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonGenerateAllPermutations";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinButton UIGenerateallButton
        {
            get
            {
                if ((this.mUIGenerateallButton == null))
                {
                    this.mUIGenerateallButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGenerateallButton.SearchProperties[WinButton.PropertyNames.Name] = "Generate all";
                    this.mUIGenerateallButton.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUIGenerateallButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGenerateallButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINmMthPermutationWindow : WinWindow
    {
        
        public UINmMthPermutationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "nmMthPermutation";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinComboBox UITotalpermutationsComboBox
        {
            get
            {
                if ((this.mUITotalpermutationsComboBox == null))
                {
                    this.mUITotalpermutationsComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUITotalpermutationsComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Total permutations:";
                    this.mUITotalpermutationsComboBox.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUITotalpermutationsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUITotalpermutationsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITotalpermutationsComboBox : WinComboBox
    {
        
        public UITotalpermutationsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Total permutations:";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinEdit UITotalpermutationsEdit
        {
            get
            {
                if ((this.mUITotalpermutationsEdit == null))
                {
                    this.mUITotalpermutationsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITotalpermutationsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Total permutations:";
                    this.mUITotalpermutationsEdit.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUITotalpermutationsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITotalpermutationsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItem0123456789Window : WinWindow
    {
        
        public UIItem0123456789Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textMthPermutation";
            this.WindowTitles.Add("AUT main form");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextMthPermutationEdit
        {
            get
            {
                if ((this.mUITextMthPermutationEdit == null))
                {
                    this.mUITextMthPermutationEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextMthPermutationEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Mth item:";
                    this.mUITextMthPermutationEdit.WindowTitles.Add("AUT main form");
                    #endregion
                }
                return this.mUITextMthPermutationEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextMthPermutationEdit;
        #endregion
    }
}
